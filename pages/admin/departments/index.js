import { House, Search, X } from 'lucide-react';
import React, { useEffect, useState } from 'react'
import Layout from '../../../components/Layout';
import Head from "next/head";
import { Button, Modal, Form, Input, InputNumber, DatePicker, Select } from 'antd'
import { useUserContext } from '../../../context/UserContext';
import { toast } from 'sonner';
import { useRouter } from 'next/router';
import { CircleX } from "lucide-react";

export default function Departments() {
    const { user } = useUserContext();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [searchName, setSearchName] = useState("");
    const [searchID, setSearchID] = useState("");
    const [departments, setDepartments] = useState(null);
    const [managers, setManagers] = useState(null);

    const fetchDepartments = async () => {
        const token = localStorage.getItem("token");
        try {
            const response = await fetch("http://localhost:8080/api/v1/departments", {
                method: "GET",
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            });

            if (!response.ok) throw new Error("Failed to fetch departments");

            const departmentData = await response.json();
            setDepartments(departmentData);
        } catch (error) {
            console.error("Error occured:", error);
            toast.error("Something went wrong!!!");
        }
    }

    const fetchManagers = async () => {
        const token = localStorage.getItem("token");
        const dataToPass = { role: "MANAGER" }
        try {
            const response = await fetch("http://localhost:8080/api/v1/users/role", {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",

                },
                body: JSON.stringify(dataToPass)
            });

            if (!response.ok) throw new Error("Failed to fetch managers");

            const managerData = await response.json();
            setManagers(managerData);
        } catch (error) {
            console.error("Error occured:", error);
            toast.error("Something went wrong!!!");
        }
    }

    const deleteDepartment = async (departmentId) => {
        try {
            const token = localStorage.getItem("token");
            const response = await fetch(`http://localhost:8080/api/v1/departments/${departmentId}`, {
                method: "DELETE",
                headers: {
                    Authorization: `Bearer ${token}`,
                }
            })

            if (!response.ok) throw new Error("Failed to delete department");
            fetchDepartments();
        } catch (error) {
            console.error("Error saving process:", error);
            toast.error("Failed to save process!");
        }
    }


    useEffect(() => {
        fetchDepartments();
        fetchManagers();
    }, []);

    const showModal = () => {
        setIsModalOpen(true);
    };

    const handleOk = () => {
        setIsModalOpen(false);
    };

    const handleCancel = () => {
        setIsModalOpen(false);
    };

    if (user && user.role !== "ADMIN") {
        return (
            <Layout>
                <div className="flex justify-center items-center text-3xl">You are not allowed to access this page</div>
            </Layout>
        )
    }

    const filteredDepartments = departments?.filter((department) => {
        const matchesName = department.departmentName
            .toLowerCase()
            .includes(searchName.toLowerCase());
        const matchesId = department.departmentId
            .toLowerCase()
            .includes(searchID.toLowerCase());
        return matchesName && matchesId;
    });

    return (
        <div className="">
            <Head>
                <title>CSBU management</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/pro.ico" />
            </Head>
            <Layout>
                <div className="p-6 w-full bg-white shadow-md rounded-md h-full">
                    {/* <div className="flex items-center text-gray-600 space-x-2 mb-4"> */}
                    {/* <span className="text-gray-500 group" onClick={()=> backToHome()}>
                        <House className="text-gray-500 group-hover:text-black transition-colors duration-300" size={20}/>
                        </span>
                        <span className="text-gray-400">/</span>
                        <span className="text-l font-semibold">Projects</span>
                    </div>
                    <hr></hr> */}
                    <h1 className="text-2xl font-semibold mb-4 mt-4">Departments</h1>
                    <SearchBar searchID={searchID} setSearchID={setSearchID} searchName={searchName} setSearchName={setSearchName} />
                    <CreateModal
                        isModalOpen={isModalOpen}
                        handleOk={handleOk}
                        handleCancel={handleCancel}
                    />
                    <Table showModal={showModal} departments={filteredDepartments} managers={managers} deleteDepartment={deleteDepartment}/>
                </div>
            </Layout>

        </div>
    )
}
const SearchBar = ({ searchID, setSearchID, searchName, setSearchName }) => {
    return (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4 ">
            <input
                type="text"
                placeholder="Search by Department ID"
                className="border rounded-md p-2 focus:outline-none focus:ring-1 focus:ring-green-500"
                value={searchID}
                onChange={e => setSearchID(e.target.value)}
            />
            <input
                type="text"
                placeholder="Search by Department Name"
                className="border rounded-md p-2 focus:outline-none focus:ring-1 focus:ring-green-500"
                value={searchName}
                onChange={e => setSearchName(e.target.value)}
            />
            {/* <select className="border rounded-md p-2 focus:outline-none focus:ring-1 focus:ring-green-500">
                <option>Select year</option>
                <option>2024</option>
                <option>2023</option>
            </select> */}
            {/* <div className="flex flex-col md:flex-row space-x-0 md:space-x-2">
                <button className="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition flex items-center space-x-2 mb-2 md:mb-0">
                    <Search size={15} />
                    <span className="ml-2">Search</span>
                </button>
                <button className="bg-gray-400 text-white px-4 py-2 rounded-md hover:bg-gray-500 transition flex items-center space-x-2">
                    <X size={15} />
                    <span className="ml-2">Reset</span>
                </button>
            </div> */}
        </div>
    );
}

const Table = ({ showModal, departments, managers, deleteDepartment }) => {
    const router = useRouter();

    const updateDepartment = async (departmentUpdate) => {
        try {
            const token = localStorage.getItem("token");
            console.log(departmentUpdate);
            const response = await fetch("http://localhost:8080/api/v1/departments/update", {
                method: "PUT",
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(departmentUpdate),
            });

            const data = await response.json();
            if (response.ok) {
                // Successfully saved the department
                console.log("Department updated successfully", data);
                toast.success("Department updated successfully");
            } else {
                // Handle any errors from the server
                console.error("Error updating department:", data);
                // You can show a toast or notification for error
            }
        } catch (error) {
            console.error("Error during department update:", error);
        } finally {
            router.reload();
        }
    }

    return (
        <div className="overflow-x-auto">
            <Button
                size="large"
                className="mb-2"
                onClick={showModal}>
                Create Department
            </Button>
            <table className="table-auto w-full text-sm text-left border-collapse border border-gray-300">
                <thead className="bg-gray-100">
                    <tr>
                        <th className="border px-4 py-2">Department ID</th>
                        <th className="border px-4 py-2">Department Name</th>
                        <th className="border px-4 py-2">Managers</th>
                        <th className="border px-4 py-2">Action</th>
                    </tr>
                </thead>
                <tbody>
                    {departments && departments.map((department, index) => {
                        const dep_managers = managers?.filter((manager) => manager.department === department.departmentId)
                            .map((manager) => manager.fullname)
                        return (
                            // <tr key={index} className="hover:bg-gray-100">
                            //     <td className="border px-4 py-2">{department.departmentId}</td>
                            //     <td className="border px-4 py-2">{department.departmentName}</td>
                            //     <td className="border px-4 py-2">{dep_managers?.join(", ")}</td>
                            // </tr>
                            <DepartmentForm key={index} departmentData={department} onSave={updateDepartment} depManagers={dep_managers} deleteDepartment={deleteDepartment} />
                        )
                    })}
                </tbody>
            </table>
        </div>
    );
}

const CreateModal = ({ isModalOpen, handleOk, handleCancel }) => {
    const [form] = Form.useForm();
    const [loading, setLoading] = useState(false);
    const router = useRouter();

    // Function to save the department data
    const saveDepartment = async (values) => {
        setLoading(true);
        try {
            // Send the department data to the backend or API
            const token = localStorage.getItem("token")
            const response = await fetch("http://localhost:8080/api/v1/departments", {
                method: "POST",
                headers: {
                    Authorization: `Bearer ${token}`,
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(values),
            });

            const data = await response.json();
            if (response.ok) {
                // Successfully saved the department
                console.log("Department created successfully", data);
                handleOk(data);  // Pass the saved department data to parent
                form.resetFields();  // Reset the form fields
                toast.success("Department Created Successfully");
            } else {
                // Handle any errors from the server
                console.error("Error creating department:", data.message);
                // You can show a toast or notification for error
            }
        } catch (error) {
            console.error("Error during department creation:", error);
        } finally {
            setLoading(false);
            router.reload();
        }
    };

    const modal_footer = [
        <Button
            size="large"
            key="cancel"
            onClick={handleCancel}
            className="bg-[rgb(239,105,105)] text-white no-transition"
        >
            Cancel
        </Button>,
        <Button
            size="large"
            className="bg-[rgb(115,222,65)] text-white no-transition"
            key="submit"
            onClick={() => {
                form
                    .validateFields()
                    .then((values) => {
                        saveDepartment(values);  // Call saveDepartment instead of handleOk
                    })
                    .then(() => handleCancel())
                    .catch((info) => {
                        console.log("Validate Failed:", info);
                    });
            }}
            loading={loading}
        >
            {loading ? "Creating..." : "Create"}
        </Button>,
    ];

    return (
        <Modal
            title="Create New Department"
            open={isModalOpen}
            onOk={handleOk}
            onCancel={handleCancel}
            footer={modal_footer}
            width={850}
        >
            <Form form={form} layout="vertical">
                {/* Department ID Field */}
                <Form.Item
                    name="departmentId"
                    label="Department ID"
                    rules={[
                        { required: true, message: "Please input the department ID!" },
                    ]}
                >
                    <Input size="large" />
                </Form.Item>

                {/* Department Name Field */}
                <Form.Item
                    name="departmentName"
                    label="Department Name"
                    rules={[
                        { required: true, message: "Please input the department name!" },
                    ]}
                >
                    <Input size="large" />
                </Form.Item>
            </Form>
        </Modal>
    );
};


const DepartmentForm = ({ departmentData, onSave, depManagers, deleteDepartment }) => {
    const [edit, setEdit] = useState(false);
    const [editDepartment, setEditDepartment] = useState(departmentData);

    const handleInputChange = (field, value) => {
        setEditDepartment((prev) => ({ ...prev, [field]: value }));
    };

    const saveDepartment = async () => {
        try {
            await onSave(editDepartment); // Call the save handler passed via props
            setEdit(false); // Exit edit mode after saving
        } catch (error) {
            console.error("Failed to save department:", error);
        }
    };


    return (
        <tr className="hover:bg-gray-100">
            {/* ID Field */}
            <td className="border px-4 py-2">
                {edit ? (
                    <Input
                        value={editDepartment.departmentId}
                        onChange={(e) => handleInputChange("departmentId", e.target.value)}
                        disabled // Disable ID editing if it's not allowed
                    />
                ) : (
                    departmentData.departmentId
                )}
            </td>

            {/* Full Name Field */}
            <td className="border px-4 py-2">
                {edit ? (
                    <Input
                        value={editDepartment.departmentName}
                        onChange={(e) => handleInputChange("departmentName", e.target.value)}
                    />
                ) : (
                    departmentData.departmentName
                )}
            </td>
            <td className="border px-4 py-2">{depManagers?.join(", ")}</td>

            {/* Action Buttons */}
            <td className="border px-4 py-2">
                {edit ? (
                    <div className="flex gap-2">
                        {/* Save Button */}
                        <Button size="small" className="mb-2" onClick={saveDepartment}>
                            Save
                        </Button>
                        {/* Cancel Button */}
                        <Button size="small" className="mb-2" onClick={() => setEdit(false)}>
                            Cancel
                        </Button>
                    </div>
                ) : (
                    <div className="flex gap-2">
                        <Button size="small" className="mb-2" onClick={() => setEdit(true)}>
                            Edit
                        </Button>
                        <div className=" flex rounded-full">
                            <button><CircleX className="text-[#de0d0d] w-8 h-8" onClick={() => deleteDepartment(departmentData.departmentId)} /></button>
                        </div>
                    </div>
                )}
            </td>
        </tr>
    );
};