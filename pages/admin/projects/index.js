// import { House, Search, X } from 'lucide-react';
// import React, { useEffect, useState } from 'react'
// import Layout from '../../../components/Layout';
// import Head from "next/head";
// import { Button, Modal, Form, Input, InputNumber, DatePicker, Select } from 'antd'
// import { useUserContext } from '../../../context/UserContext';
// import { toast } from 'sonner';

// export default function Projects() {
//   const { user } = useUserContext();
//   const [isModalOpen, setIsModalOpen] = useState(false);

//   const showModal = () => {
//     setIsModalOpen(true);
//   };

//   const handleOk = () => {
//     setIsModalOpen(false);
//   };

//   const handleCancel = () => {
//     setIsModalOpen(false);
//   };

//   if (user && user.role !== "ADMIN") {
//     return (
//       <Layout>
//         <div className="flex justify-center items-center text-3xl">You are not allowed to access this page</div>
//       </Layout>
//     )
//   }
//   return (
//     <div className="">
//       <Head>
//         <title>CSBU management</title>
//         <meta name="description" content="Generated by create next app" />
//         <link rel="icon" href="/pro.ico" />
//       </Head>
//       <Layout>
//         <div className="p-6 w-full bg-white shadow-md rounded-md h-full">
//           {/* <div className="flex items-center text-gray-600 space-x-2 mb-4"> */}
//           {/* <span className="text-gray-500 group" onClick={()=> backToHome()}>
//                         <House className="text-gray-500 group-hover:text-black transition-colors duration-300" size={20}/>
//                         </span>
//                         <span className="text-gray-400">/</span>
//                         <span className="text-l font-semibold">Projects</span>
//                     </div>
//                     <hr></hr> */}
//           <h1 className="text-2xl font-semibold mb-4 mt-4">Projects Management</h1>
//           <CreateModal
//             isModalOpen={isModalOpen}
//             handleOk={handleOk}
//             handleCancel={handleCancel}
//           />
//           <SearchBar />
//           <Table showModal={showModal} />
//         </div>
//       </Layout>

//     </div>
//   )
// }
// const SearchBar = () => {
//   return (
//     <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4 ">
//       <input
//         type="text"
//         placeholder="Search by Project Code/Name"
//         className="border rounded-md p-2 focus:outline-none focus:ring-1 focus:ring-green-500"
//       />
//       <select className="border rounded-md p-2 focus:outline-none focus:ring-1 focus:ring-green-500">
//         <option>Select year</option>
//         <option>2024</option>
//         <option>2023</option>
//       </select>
//       <div className="flex flex-col md:flex-row space-x-0 md:space-x-2">
//         <button className="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition flex items-center space-x-2 mb-2 md:mb-0">
//           <Search size={15} />
//           <span className="ml-2">Search</span>
//         </button>
//         <button className="bg-gray-400 text-white px-4 py-2 rounded-md hover:bg-gray-500 transition flex items-center space-x-2">
//           <X size={15} />
//           <span className="ml-2">Reset</span>
//         </button>
//       </div>
//     </div>
//   );
// }

// const Table = ({ showModal }) => {
//   const [projects, setProjects] = useState(null);
//   // const data = [
//   //     {
//   //         code: "P001",
//   //         name: "Project Alpha",
//   //         initialBudget: "$100,000",
//   //         remainingBudget: "$60,000",
//   //         description: "A large-scale infrastructure project.",
//   //         createdAt: "2024-01-15",
//   //     },
//   //     {
//   //         code: "P002",
//   //         name: "Project Beta",
//   //         initialBudget: "$150,000",
//   //         remainingBudget: "$90,000",
//   //         description: "A software development project.",
//   //         createdAt: "2024-03-01",
//   //     },
//   //     {
//   //         code: "P003",
//   //         name: "Project Gamma",
//   //         initialBudget: "$200,000",
//   //         remainingBudget: "$100,000",
//   //         description: "A research and development project.",
//   //         createdAt: "2024-04-10",
//   //     },
//   //     {
//   //         code: "P004",
//   //         name: "Project Delta",
//   //         initialBudget: "$50,000",
//   //         remainingBudget: "$30,000",
//   //         description: "A marketing campaign.",
//   //         createdAt: "2024-06-25",
//   //     },
//   // ];
//   const fetchProjects = async () => {
//     const token = localStorage.getItem("token");
//     try {
//       const response = await fetch("http://localhost:8080/api/v1/projects", {
//         method: "GET",
//         headers: {
//           Authorization: `Bearer ${token}`,
//         }
//       });

//       if (!response.ok) throw new Error("Failed to fetch projects");

//       const projectsData = await response.json();
//       setProjects(projectsData);
//     } catch (error) {
//       console.error("Error occured:", error);
//       toast.error("Something went wrong!!!");
//     }
//   }

//   useEffect(() => {
//     fetchProjects();
//   }, []);

//   return (
//     <div className="overflow-x-auto">
//       <Button
//         size="large"
//         className="mb-2"
//         onClick={showModal}>
//         Create Projects
//       </Button>
//       <table className="table-auto w-full text-sm text-left border-collapse border border-gray-300">
//         <thead className="bg-gray-100">
//           <tr>
//             <th className="border px-4 py-2">Projects Id</th>
//             <th className="border px-4 py-2">Projects Name</th>
//             <th className="border px-4 py-2">Start Date</th>
//             <th className="border px-4 py-2">End Date</th>
//             <th className="border px-4 py-2">Department</th>
//             <th className="border px-4 py-2">Description</th>
//             <th className="border px-4 py-2">Create At</th>
//             <th className="border px-4 py-2">Action</th>
//           </tr>
//         </thead>
//         <tbody>
//           {projects && projects.map((project) => (
//             <tr key={project.projectId} className="hover:bg-gray-100">
//               <td className="border px-4 py-2">{project.projectId}</td>
//               <td className="border px-4 py-2">{project.projectName}</td>
//               <td className="border px-4 py-2">{project.startDate}</td>
//               <td className="border px-4 py-2">{project.endDate}</td>
//               <td className="border px-4 py-2">{project.departmentId}</td>
//               <td className="border px-4 py-2">{project.description}</td>
//               <td className="border px-4 py-2">{project.createdAt}</td>
//               <td className="border px-4 py-2">
//                 <Button
//                   size="small"
//                   className="mb-2"
//                   onClick={showModal}>
//                   Create Projects
//                 </Button>
//               </td>
//             </tr>
//           ))}
//         </tbody>
//       </table>
//       {/* <div className="flex justify-between items-center mt-4">
//             <span className="text-sm text-gray-600">1-10 của 76 Mục</span>
//             <div className="flex space-x-1">
//             <button className="px-2 py-1 bg-gray-200 rounded hover:bg-gray-300">1</button>
//             <button className="px-2 py-1 bg-gray-100 rounded hover:bg-gray-300">2</button>
//             <button className="px-2 py-1 bg-gray-100 rounded hover:bg-gray-300">3</button>
//             <span>...</span>
//             <button className="px-2 py-1 bg-gray-100 rounded hover:bg-gray-300">10</button>
//             </div>
//         </div> */}
//     </div>
//   );
// }

// const CreateModal = ({ isModalOpen, handleOk, handleCancel }) => {
//   const [form] = Form.useForm();
//   const employeeOptions = [
//     { label: "John Doe", value: "john_doe" },
//     { label: "Jane Smith", value: "jane_smith" },
//     { label: "Sam Wilson", value: "sam_wilson" },
//   ];
//   const modal_footer = [
//     <Button size="large" key="cancel" onClick={handleCancel}
//       className="bg-[rgb(239,105,105)] text-white no-transition">
//       Cancel
//     </Button>,
//     <Button size="large"
//       className="bg-[rgb(115,222,65)] text-white no-transition"
//       key="submit"
//       onClick={() => {
//         form.validateFields()
//           .then(values => {
//             handleOk(values);
//             form.resetFields();
//           })
//           .catch(info => {
//             console.log('Validate Failed:', info);
//           });
//       }}
//     >
//       Create
//     </Button>,
//   ]

//   return (
//     <Modal
//       title="Create New Task"
//       open={isModalOpen}
//       onOk={handleOk}
//       onCancel={handleCancel}
//       footer={modal_footer}
//       width={850}
//     >
//       <Form form={form} layout="vertical">
//         <Form.Item name="taskName" label="Project Name" rules={[{ required: true, message: 'Please input the task name!' }]}>
//           <Input size="large" />
//         </Form.Item>
//         <Form.Item
//           name="initialBudget"
//           label="Initial Budget"
//           rules={[{ required: true, message: 'Please input the initial budget amount!' }]}
//         >
//           <InputNumber
//             min={0}
//             step={1000}
//             placeholder="Enter initial budget"
//             style={{ width: '100%' }}
//             size="large"
//             formatter={(value) => `${value} $`}
//             parser={(value) => value.replace(' $', '')}
//           />
//         </Form.Item>
//         <Form.Item name="Description" label="Description">
//           <Input.TextArea size="large" />
//         </Form.Item>
//       </Form>
//     </Modal>
//   )
// }

import { Search, X } from 'lucide-react';
import React, { useEffect, useState } from 'react';
import Layout from '../../../components/Layout';
import Head from 'next/head';
import { Button, Modal, Form, Input, InputNumber, DatePicker, Select } from 'antd';
import { useUserContext } from '../../../context/UserContext';
import { toast } from 'sonner';
import moment from 'moment';
import dayjs from 'dayjs';

export default function ProjectsPage() {
  const { user } = useUserContext();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isEditMode, setIsEditMode] = useState(false);
  const [projects, setProjects] = useState([]);
  const [currentProject, setCurrentProject] = useState(null);

  const fetchProjects = async () => {
    const token = localStorage.getItem("token");
    try {
      const response = await fetch("http://localhost:8080/api/v1/projects", {
        method: "GET",
        headers: { Authorization: `Bearer ${token}` },
      });

      if (!response.ok) throw new Error("Failed to fetch projects");
      const data = await response.json();
      setProjects(data);
    } catch (error) {
      console.error("Error fetching projects:", error);
      toast.error("Failed to fetch projects!");
    }
  };

  useEffect(() => {
    fetchProjects();
  }, []);

  const showModal = (project = null) => {
    setIsModalOpen(true);
    setIsEditMode(!!project);
    setCurrentProject(project);
  };

  const hideModal = () => {
    setIsModalOpen(false);
    setCurrentProject(null);
  };

  const handleFormSubmit = async (values) => {
    const token = localStorage.getItem("token");
    const url = `http://localhost:8080/api/v1/projects`

    const method = isEditMode ? "PUT" : "POST";
    // console.log(dayjs(values.endDate).format("YYYY-MM-DD"));
    const valueToPass = {
      projectId: isEditMode ? currentProject.projectId : values.projectId,
      projectName: values.projectName || null,
      startDate: dayjs(values.startDate).format("YYYY-MM-DD"),
      endDate: dayjs(values.endDate).format("YYYY-MM-DD"),
      departmentId: values.departmentId || null,
      description: values.description || null,
      createdAt: moment(values.startDate).format("YYYY-MM-DD")
    }
    console.log(valueToPass);

    try {
      const response = await fetch(url, {
        method,
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(valueToPass),
      });

      if (!response.ok) throw new Error("Failed to save project");

      toast.success(isEditMode ? "Project updated successfully!" : "Project created successfully!");
      fetchProjects();
      hideModal();
    } catch (error) {
      console.error("Error saving project:", error);
      toast.error("Failed to save project!");
    }
  };

  if (user?.role !== "ADMIN") {
    return (
      <Layout>
        <div className="flex justify-center items-center text-3xl">
          You are not allowed to access this page.
        </div>
      </Layout>
    );
  }

  return (
    <div>
      <Head>
        <title>CSBU Management - Projects</title>
        <meta name="description" content="Manage your projects with ease." />
        <link rel="icon" href="/pro.ico" />
      </Head>
      <Layout>
        <div className="p-6 w-full bg-white shadow-md rounded-md h-full">
          <h1 className="text-2xl font-semibold mb-4">Projects Management</h1>
          <SearchBar />
          <Button className="mb-4" onClick={() => showModal()}>
            Create Project
          </Button>
          <ProjectsTable projects={projects} onEdit={showModal} />
          <CreateEditProjectModal
            isModalOpen={isModalOpen}
            isEditMode={isEditMode}
            project={currentProject}
            handleCancel={hideModal}
            handleSubmit={handleFormSubmit}
          />
        </div>
      </Layout>
    </div>
  );
}

const SearchBar = () => (
  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
    <input
      type="text"
      placeholder="Search by Project Code/Name"
      className="border rounded-md p-2 focus:outline-none focus:ring-1 focus:ring-green-500"
    />
    <select className="border rounded-md p-2 focus:outline-none focus:ring-1 focus:ring-green-500">
      <option>Select year</option>
      <option>2024</option>
      <option>2023</option>
    </select>
    <div className="flex space-x-2">
      <button className="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition flex items-center">
        <Search size={15} />
        <span className="ml-2">Search</span>
      </button>
      <button className="bg-gray-400 text-white px-4 py-2 rounded-md hover:bg-gray-500 transition flex items-center">
        <X size={15} />
        <span className="ml-2">Reset</span>
      </button>
    </div>
  </div>
);

const ProjectsTable = ({ projects, onEdit }) => (
  <div className="overflow-x-auto">
    <table className="table-auto w-full text-sm text-left border-collapse border border-gray-300">
      <thead className="bg-gray-100">
        <tr>
          <th className="border px-4 py-2">Project ID</th>
          <th className="border px-4 py-2">Project Name</th>
          <th className="border px-4 py-2">Start Date</th>
          <th className="border px-4 py-2">End Date</th>
          <th className="border px-4 py-2">Department</th>
          <th className="border px-4 py-2">Description</th>
          <th className="border px-4 py-2">Actions</th>
        </tr>
      </thead>
      <tbody>
        {projects.map((project) => (
          <tr key={project.projectId} className="hover:bg-gray-100">
            <td className="border px-4 py-2">{project.projectId}</td>
            <td className="border px-4 py-2">{project.projectName}</td>
            <td className="border px-4 py-2">{project.startDate}</td>
            <td className="border px-4 py-2">{project.endDate}</td>
            <td className="border px-4 py-2">{project.departmentId}</td>
            <td className="border px-4 py-2">{project.description}</td>
            <td className="border px-4 py-2">
              <Button size="small" onClick={() => onEdit(project)}>
                Edit
              </Button>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>
);

const CreateEditProjectModal = ({ isModalOpen, isEditMode, project, handleCancel, handleSubmit }) => {
  const [form] = Form.useForm();
  const [departments, setDepartments] = useState(null);
  const [department, setDepartment] = useState(null);

  useEffect(() => {
    if (isEditMode && project) {
      form.setFieldsValue({
        projectName: project.projectName,
        // startDate: new Date(project.startDate),
        // endDate: new Date(project.endDate),
        department: project.departmentId,
        description: project.description,
      });
    } else {
      form.resetFields();
    }
  }, [isEditMode, project, form]);

  const fetchDepartments = async () => {
    const token = localStorage.getItem("token");
    try {
      const response = await fetch("http://localhost:8080/api/v1/departments", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!response.ok) throw new Error("Failed to fetch departments");

      const departmentData = await response.json();
      setDepartments(departmentData);
    } catch (error) {
      console.error("Error occured:", error);
      toast.error("Something went wrong!!!");
    }
  }

  useEffect(() => {
    fetchDepartments();
  }, []);

  return (
    <Modal
      title={isEditMode ? "Edit Project" : "Create New Project"}
      open={isModalOpen}
      onCancel={handleCancel}
      footer={[
        <Button key="cancel" onClick={handleCancel} className="bg-red-500 text-white">
          Cancel
        </Button>,
        <Button
          key="submit"
          onClick={() => form.validateFields().then((values) => handleSubmit({...values, departmentId: department}))}
          className="bg-green-500 text-white"
        >
          {isEditMode ? "Update" : "Create"}
        </Button>,
      ]}
      width={850}
    >
      <Form form={form} layout="vertical">
        {!isEditMode && <Form.Item
          name="projectId"
          label="Project Id"
          rules={[{ required: true, message: "Please enter the project ID" }]}
        >
          <Input size="large" />
        </Form.Item>}
        <Form.Item
          name="projectName"
          label="Project Name"
          rules={[{ required: true, message: "Please enter the project name" }]}
        >
          <Input size="large" />
        </Form.Item>
        <Form.Item
          name="startDate"
          label="Start Date"
          rules={[{ required: true, message: "Please select the start date" }]}
        >
          <DatePicker size="large" style={{ width: "100%" }} />
        </Form.Item>
        <Form.Item
          name="endDate"
          label="End Date"
          rules={[{ required: true, message: "Please select the end date" }]}
        >
          <DatePicker size="large" style={{ width: "100%" }} />
        </Form.Item>
        <Form.Item
          name="department"
          label="Department"
          rules={[{ required: true, message: "Please select a department" }]}
        >
          <Select
            value={department}
            onChange={(value) => setDepartment(value)}
            style={{ width: "100%" }}
          >
            {/* Add the options for departments */}
            {departments && departments.map((department) =>
              <Select.Option key={department.departmentId} value={department.departmentId}>{department.departmentName}</Select.Option>
            )}
          </Select>
        </Form.Item>
        <Form.Item name="description" label="Description">
          <Input.TextArea size="large" />
        </Form.Item>
      </Form>
    </Modal>
  );
};