import { House , Search, X , Eye, CircleCheck, CircleX } from "lucide-react";
import Layout from "../../../components/Layout"
import Head from "next/head";
import { useEffect, useState } from "react";
import { postFetcher,getFetcher , deleteFetcher, updateFetcher} from "../../../fetcher";
import useSWR, { mutate } from 'swr';
import {Button, Modal, Form, Input, Upload, Select, Pagination, InputNumber, message} from 'antd'
import { UploadOutlined } from '@ant-design/icons';
import { FINANCE_API_URL } from "../../../env";
export default function Transaction() {
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchParams, setSearchParams] = useState("");
  const showModal = () => {
    setIsCreateModalOpen(true);
  };
  const handleOk = () => {
    setIsCreateModalOpen(false);
  }; 
  const handleCancel = () => {
    setIsCreateModalOpen(false);
  };
  const handlePageChange = (page) => {
    setCurrentPage(page);
  };

  const onSearch = ({ searchQuery, startDate, endDate, selectedBudget, selectedStatus }) => {
    const searchParams = new URLSearchParams();
    if (searchQuery) searchParams.append('searchQuery', searchQuery);
    if (startDate) searchParams.append('startDate', startDate);
    if (endDate) searchParams.append('endDate', endDate);
    if (selectedBudget) searchParams.append('budget', selectedBudget);
    if (selectedStatus) searchParams.append('status', selectedStatus);
    setCurrentPage(1);  
    setSearchParams(searchParams.toString())
  };
  


  const { data, error, isLoading } = useSWR(
    `/api/transaction?page=${currentPage}&${searchParams}`,
    getFetcher,
    {
      refreshInterval: 0,
      revalidateOnFocus: true,
    }
  );

  

  if (isLoading) return <div>Loading...</div>;
  if (error) return <div>Error: {error.message}</div>;

  return (
    <div className="">
      <Head>
        <title>CSBU management</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/pro.ico" />
      </Head>
      <Layout>
        <div className="p-6 w-full bg-white shadow-md rounded-md min-h-screen">
          <div className="flex items-center text-gray-600 space-x-2 mb-4">
            <span className="text-gray-500 group" onClick={()=> backToHome()}>
              <House className="text-gray-500 group-hover:text-black transition-colors duration-300" size={20}/>
            </span>
            <span className="text-gray-400">/</span>
            <span className="text-l font-semibold">Transaction</span>
          </div>
          <hr></hr>
          <h1 className="text-2xl font-semibold mb-4 mt-4">Transaction Management</h1>
          <SearchBar showModal={showModal} onSearch={onSearch} setSearchParams={setSearchParams} setCurrentPage={setCurrentPage}/>
          <Table currentPage={data.currentPage} totalPages={data.totalPages} data={data.data} handlePageChange={handlePageChange} searchParams={searchParams} />
          <CreateModal
                isCreateModalOpen={isCreateModalOpen}
                handleOk={handleOk}
                handleCancel={handleCancel}
              />
        </div>
      </Layout>
    </div>
  );
}
const CreateModal = ({ isCreateModalOpen, handleOk, handleCancel}) => {
  const [form] = Form.useForm();
  const [budgetOptions, setBudgetOptions] = useState([]);
  const modal_footer=[
    <Button size="large" key="cancel" onClick={handleCancel}
      className="bg-[rgb(239,105,105)] text-white no-transition">
      Cancel
    </Button>,
    <Button size="large"
      className="bg-[rgb(115,222,65)] text-white no-transition"
      key="submit"
      onClick={() => handleCreate()}
    >
      Create
    </Button>,
  ]

  const { data, error, isLoading } = useSWR(['/api/budget/id-currency'], getFetcher);
  useEffect(() => {
    if (isCreateModalOpen) {
      setBudgetOptions(data); 
    }
  }, [isCreateModalOpen]);
  const [err, setErr] = useState('')
  const handleCreate = async () => {
    try {
      const values = await form.validateFields();
      
      const newData = await postFetcher('/api/transaction', {
        id: values.transactionId,
        transactionType: values.transactionType,
        budgetId: values.Budget,
        currency: budgetOptions.find(budget => budget.id === values.Budget).currency, 
        amount: values.transactionAmount,
        description: values.Description
      });
      
      window.location.reload();

      
      handleOk(values); 
      form.resetFields();
    } catch (error) {
      setErr(error)
      console.error('Failed to create Budget:', error);
    }
  };
  
  return (
    <Modal
      title="Create New Task"
      open={isCreateModalOpen}
      onOk={handleOk}
      onCancel={handleCancel}
      footer={modal_footer}
      width={850} 
    >
      <Form form={form} layout="vertical">
        <Form.Item name="transactionId" label="Transaction Id" rules={[{ required: true, message: 'Please input the transaction type!' }]}>
          <Input size="large"/>
        </Form.Item>
        <Form.Item name="transactionType" label="Transaction Type" rules={[{ required: true, message: 'Please input the transaction type!' }]}>
          <Input size="large"/>
        </Form.Item>
        <Form.Item
          name="Budget"
          label="Choose Budget"
          rules={[{ required: true, message: 'Please select the Budget!' }]}
        >
          <Select placeholder="Select a Budget" size="large">
            {budgetOptions.map((budget) => (
              <Select.Option key={budget.id} value={budget.id}>
                {budget.id}({budget.currency})
              </Select.Option>
            ))}
          </Select>
        </Form.Item>
        <Form.Item
          name="transactionAmount"
          label="Transaction Amount"
          rules={[{ required: true, message: 'Please input the initial budget amount!' }]}
        >
        <InputNumber
          min={0}
          step={1000}
          placeholder="Enter transaction amount"
          style={{ width: '100%' }}
          size="large"
        />
        </Form.Item>
        <Form.Item name="Description" label="Description"
          rules={[{ required: true, message: 'Please input the Description!' }]}
        >
            <Input.TextArea size="large"/>
        </Form.Item>
      </Form>
      <div>
        {err && err.errorFields && err.errorFields[0] && err.errorFields[0].errors && err.errorFields[0].errors[0] && (
          <div style={{ color: 'red' }}>
            {err.errorFields[0].errors[0]}
          </div>
        )}
      </div>
    </Modal>
  )
}
const SearchBar = ({showModal, onSearch, setSearchParams, setCurrentPage}) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [selectedBudget, setSelectedBudget] = useState('');
  const [selectedStatus, setSelectedStatus] = useState('');
  const handleReset = () => {
    setSearchQuery('');
    setStartDate('');
    setEndDate('');
    setSelectedBudget('');
    setSelectedStatus('');
    setSearchParams('');  
    setCurrentPage(1); 
  };
  const handleSearch = () => {
    onSearch({
      searchQuery,
      startDate,
      endDate,
      selectedBudget,
      selectedStatus,
    });
  };
  return (
    <div>
      <div className="flex flex-wrap sm:flex-nowrap sm:space-x-4 mb-4 p-4">
        <div className="flex flex-col w-full sm:w-1/3 mb-4 sm:mb-0">
          <label htmlFor="search" className="block text-sm font-medium text-gray-700">Search</label>
          <input
            type="text"
            placeholder="Search by BA Ref, Description"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="border rounded-md p-2 focus:outline-none focus:ring-1 focus:ring-green-500 w-full"
          />
        </div>

        <div className="flex flex-col w-full sm:w-1/3 mb-4 sm:mb-0">
          <label htmlFor="date-range" className="block text-sm font-medium text-gray-700">Date range</label>
          <div className="flex space-x-2">
            <input
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              className="border rounded-md p-2 focus:outline-none focus:ring-1 focus:ring-green-500 w-full"
            />
            <span className="text-xl">â†’</span>
            <input
              type="date"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
              className="border rounded-md p-2 focus:outline-none focus:ring-1 focus:ring-green-500 w-full"
            />
          </div>
        </div>

        <div className="flex flex-col w-full sm:w-1/3 mb-4 sm:mb-0">
          <label htmlFor="budget" className="block text-sm font-medium text-gray-700">Budget</label>
          <select
            id="budget"
            value={selectedBudget}
            onChange={(e) => setSelectedBudget(e.target.value)}
            className="border rounded-md p-2 focus:outline-none focus:ring-1 focus:ring-green-500 w-full"
          >
            <option>Choose</option>
            <option>2024</option>
            <option>2023</option>
          </select>
        </div>

        <div className="flex flex-col w-full sm:w-1/3 mb-4 sm:mb-0">
          <label htmlFor="status" className="block text-sm font-medium text-gray-700">Status</label>
          <select
            id="status"
            value={selectedStatus}
            onChange={(e) => setSelectedStatus(e.target.value)}
            className="border rounded-md p-2 focus:outline-none focus:ring-1 focus:ring-green-500 w-full"
          >
            <option>Choose</option>
            <option>Pending</option>
            <option>Paid</option>
          </select>
        </div>
      </div>

      <div className="flex flex-col sm:flex-row sm:space-x-2 ml-4">
        <button  onClick={handleSearch}  className="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600 transition mb-2 sm:mb-0">
          <span className="font-semibold">Search</span>
        </button>
        <button onClick={handleReset} className="bg-gray-400 text-white px-4 py-2 rounded-md hover:bg-gray-500 transition mb-2 sm:mb-0">
          <span className="font-semibold">Reset</span>
        </button>
        <button onClick={showModal} className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600 transition mb-2 sm:mb-0">
          <span className="font-semibold">Add</span>
        </button>
        {/* <button className="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600 transition">
          <span className="font-semibold">Close multiple BAs</span>
        </button> */}
      </div>
    </div>
  );
};

const Table = ( {currentPage, totalPages, data, handlePageChange, searchParams})=> {
  const [isFileModalOpen, setIsFileModalOpen] = useState(false)
  const [selectedId, setSelectedId] = useState(null); 
  const handleDelete = async (id) => {
    try {
      const url = `/api/transaction/${id}`; 
      
      await deleteFetcher(url);
      window.location.reload();

    } catch (error) {
      console.error("Error deleting transaction:", error);
      alert("Failed to delete transaction.");
    }
  };
  const showImg =  (url) => {
    window.open(url, '_blank');
  };
  const showFileModal = (id) => {
    setSelectedId(id);
    setIsFileModalOpen(true);
  };
  const handleOk = () => {
    setIsFileModalOpen(false);
  }; 
  const handleCancel = () => {
    setIsFileModalOpen(false);
  };
  return (
    
<div className="overflow-x-auto mt-8">
  <FileModal isFileModalOpen={isFileModalOpen} handleOk={handleOk} handleCancel={handleCancel} id={selectedId} searchParams={searchParams} currentPage={currentPage}/>
  <table className="table-auto w-full  text-sm text-left border-collapse border border-gray-300">
    <thead className="bg-gray-100">
    <tr>
        <th className="border px-4 py-2">Transaction Id</th>
        <th className="border px-4 py-2">Transaction Type</th>
        <th className="border px-4 py-2">Amount</th> 
        <th className="border px-4 py-2">Currency</th>
        <th className="border px-4 py-2">Transaction Date</th> 
        <th className="border px-4 py-2">Description</th>
        <th className="border px-4 py-2">Budget Id</th>
        <th className="border px-4 py-2">Status</th> 
        <th className="border px-4 py-2">Actions</th>
      </tr>
    </thead>
    <tbody>
      {data.map((row, index) => (
        <tr key={index} className="hover:bg-gray-100">
          <td className="border px-4 py-2">{row.id}</td>
          <td className="border px-4 py-2">{row.transactionType}</td>
          <td className="border px-4 py-2">{row.amount}</td>
          <td className="border px-4 py-2">{row.currency}</td>
          <td className="border px-4 py-2">{row.transactionDate}</td>
          <td className="border px-4 py-2">{row.description}</td>
          <td className="border px-4 py-2">{row.budget_id}</td>
          <td className="border px-4 py-2">
          {row.status === true ? (
            <div className="text-gray-600 flex items-center justify-center rounded-full bg-[rgb(148,239,105)] py-1 px-4 shadow-md">
              Paid
            </div>
          ) : (
            <div className="text-gray-600 flex items-center justify-center rounded-full bg-[rgb(232,239,105)] py-1 px-4 shadow-md">
              Pending
            </div>
          )}
          </td>
          <td className="border px-4 py-2">
            {row.status === true ? (
              <div className=" flex items-center justify-center rounded-full">
                <button onClick={()=>showImg(row.image)} className=""><Eye/></button>
              </div>
            ) : (
              <div className=" flex items-center justify-center rounded-full gap-3">
                <button onClick={()=>showFileModal(row.id)}><CircleCheck className="text-[#33cc45]"/></button>
                <button onClick={() => handleDelete(row.id)}><CircleX className="text-[#de0d0d]"/></button>
              </div>
              
            )}
          </td>
        </tr>
      ))}
    </tbody>
  </table>
  <div className="flex justify-end items-center mt-4">
  <Pagination
        current={currentPage}
        total={totalPages * 10} 
        onChange={handlePageChange}
        showSizeChanger={false} 
        pageSize={10}
        className="my-pagination" 
      />
  </div>
</div>

  );
}
const FileModal = ({ isFileModalOpen, handleOk, handleCancel , id, currentPage,searchParams}) => {
  const [form] = Form.useForm();
  const [err, setErr] = useState('');

  const modal_footer = [
    <Button
      size="large"
      key="cancel"
      onClick={handleCancel}
      className="bg-[rgb(239,105,105)] text-white no-transition"
    >
      Cancel
    </Button>,
    <Button
      size="large"
      className="bg-[rgb(115,222,65)] text-white no-transition"
      key="submit"
      onClick={() => handleCreate()}
    >
      Upload
    </Button>,
  ];

  const handleCreate = () => {
    form.validateFields()
      .then((values) => {
        const file = values.file?.file; 
        if (file) {
          const formData = new FormData();
          formData.append('file', file);
          fetch(`${FINANCE_API_URL}/transactions/${id}/status`, {
            method: 'PUT',
            body: formData,
          })
            .then((response) => {
              if (response.ok) {
                message.success('File uploaded successfully');
                handleOk();
                form.resetFields(); 
                mutate(`/api/transaction?page=${currentPage}&${searchParams}`);
              } else {
                message.error('Failed to upload file');
              }
            })
            .catch((error) => {
              message.error(`Error: ${error.message}`);
            });
        } else {
          message.error('No file selected!');
        }
      })
      .catch((error) => {
        setErr(error);
        message.error('Please fill in all required fields.');
      });
  };

  return (
    <Modal
      title="Upload a File"
      open={isFileModalOpen}
      onOk={handleOk}
      onCancel={handleCancel}
      footer={modal_footer}
      
    >
      <Form form={form} layout="vertical">
        <Form.Item
          label="File"
          name="file"
          valuePropName="file"
          rules={[
            {
              required: true,
              message: 'Please upload a file!',
            },
          ]}
        >
          <Upload
            beforeUpload={() => false} 
            accept=".csv,.pdf,.docx,.jpg,.jpeg,.png,.gif"
            maxCount={1}
          >

            <Button icon={<UploadOutlined />}>Click to Upload</Button>
          </Upload>
        </Form.Item>
      </Form>
      <div>
        {err && err.errorFields && err.errorFields[0] && err.errorFields[0].errors && err.errorFields[0].errors[0] && (
          <div style={{ color: 'red' }}>
            {err.errorFields[0].errors[0]}
          </div>
        )}
      </div>
    </Modal>
  );
};

